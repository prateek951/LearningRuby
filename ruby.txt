UNCOMMENT THE CODE AND TRY THESE ON ONLINE EDITORS TO UNDERSTAND RUBY PROGRAMMING LANGUAGE


=begin
print "Enter a value"
first_num = gets.to_i;
print "Enter another value"
second_num = gets.to_i;
puts first_num.to_s  + " + " + second_num.to_s + " = " + (first_num + second_num).to_s 
=end

# num_one = 1.000
# num99 = 0.999

# puts num_one.to_s + " - " + num99.to_s + " = " + (num_one - num99).to_s

# big_float = 1.12345678901234
# puts (big_float + 0.00000000004).to_s

# IN RUBY PROGRAMMING LANGUAGE EVERYTHING IS AN OBJECT
# puts 1.234.class
# puts 1.class
# puts "A String".class

# CONSTANTS IN RUBY
# CONSTANTS CAN BE CHANGED IN RUBY.AT FIRST THE COMPILER
# WILL GIVE A WARNING.BUT VALUE WILL BE CHANGED

# A_CONSTANT = 3.12345678901234
# A_CONSTANT = 1.12345678901234
# puts A_CONSTANT

# File Handling in RUBY
# write_handler = File.new("yourSum.out", "w")
# write_handler.puts("Random Text").to_s
# write_handler.close

# data_from_file = File.read("yourSum.out")
# puts " Data from the file is" + data_from_file


# puts "Hello from Ruby Language"

# WORKING WITH THE CONDITIONALS
=begin
age = 12
if (age >= 5) && (age <=6)
  puts "You are in Kindergarten"
elsif (age>=7) &&(age <= 13)
  puts "You are in the Middle School"
  puts 'Yeah'
else puts "Stay Home"
end
=end

# puts "true && false = " + (true && false).to_s
# puts "true || false = " + (true || false).to_s
# puts "5 <=> 10 = " + (5 <=> 10).to_s
# age = 12

# unless age > 4
# puts "No school"
# else
# puts "Go to school"
# end
# age = 12
# puts "You are young" if age < 30

# SWITCH CASE IN RUBY
# print "Enter the greeting"
# greeting = gets.chomp

# case greeting
# when 'French','french'
#   puts "Bonjour"
#   exit
# when 'Spanish','spanish'
#   puts "Hola"
#   exit
# else "English"
#   puts "Hello"
# end

# TERNARY 
# age = 12
# puts (age >= 50) ? "Old" : "Young"

# x = 1
# loop do 
#     x += 1
#     next unless (x % 2) == 0
#     puts x 
#     break if x>=10 
#   end
  
  # y = 1
  # while y<=10
  # y+=1 
  # next unless (y%2) == 0
  # puts y
  # end
  
# a = 1

# until a>= 10
# a+=1
# next unless (a%2) == 0 
# puts a 
# end

# numbers = [1,2,3,4,5]
# for number in numbers 
# puts "#{number},"
# end

# groceries = ["bananas", " potatoes", "red beans"]

# groceries.each do |food|
#   puts "Get some #{food}"
# end

# (0..5).each do |i|
#   puts "Cycling through the list of the numbers #{i}"
# end


# functions

# def add_nums(num_1,num_2)
#   return num_1.to_i + num_2.to_i 
# end 

# puts add_nums(3,4)

# x = 1
# def change_x (x) 
#   x  = 4
# end

# change_x(x)

# puts "x = #{x}"

# EXCEPTIONS
# print " ENTER A NUMBER "
# first_num = gets.to_i 
# print " ENTER THE SECOND NUMBER"
# second_num = gets.to_i 

# begin 
#   answer = first_num / second_num 
# rescue 
#   puts "Trying to divide by zero is an error"
#   exit 
# end 

# puts "#{first_num}/ #{second_num} = #{answer}"


# USER DEFINED EXCEPTIONS 
# age = 12
 
# def check_age(age)
#   raise ArgumentError, "Enter positive number" unless age > 0 
# end

# begin 
# check_age(-1)
# rescue ArgumentError
# puts "That is an impossible age"
# end


#Strings 
# Strings are basically a series of characters 
# puts "Add them #{4 + 5}"

# multiline_string = <<EOM
# This is a very long multiline string that interpolation like #{4+5} \n\n 
# EOM 

# puts multiline_string

# first_name = 'Prateek'
# second_name = 'Madaan'

# full_name = first_name + second_name
# puts full_name 
# middle_name = "Nothing"

# full_name = "#{first_name} #{middle_name} #{second_name}"
# puts full_name

# puts full_name.include?("Nothing")
# puts full_name.size 
# puts "Vowels : " + full_name.count("aeiou").to_s 
# puts "Consonants : " + full_name.count("^aeiou").to_s 
# puts full_name.start_with?("Madaan")
# puts "Index: " + full_name.index("Nothing").to_s

# puts "a == a " + ("a" == "a").to_s 


# first_name = "Prateek"
# second_name = "Madaan"
# full_name = first_name + second_name

# puts first_name.equal?(first_name)
# puts full_name.upcase
# puts full_name.downcase
# puts full_name.swapcase

=begin
 Just like we use trim in javascript to trim the whitespaces here we use lstrip to trim whitespaces at the left end of the string and rstrip to trim white spaces at the right end of the string. strip works at both ends 
=end 

# full_name = "           " + full_name
# full_name = full_name.lstrip
# full_name = full_name.rstrip
# full_name = full_name.strip 

# puts full_name.rjust(20, '.')
# puts full_name.ljust(20,'.')
# puts full_name.center(20,'.')

# TO REMOVE THE LAST CHARACTER FROM THE STRING
# puts full_name.chop
#TO REMOVE SPECIFIED CHARACTERS FROM THE STRING
# puts full_name.chomp('aan')

# TO DELETE SPECIFIED CHARACTERS(REMOVING ALL THE OCCURENCES)

# puts full_name.delete("a")
# puts name_array = full_name.split(//)

#Objects 
#Defining a class layout in Ruby and using getters and setters in the classs
# class Animal 
#   def initialize 
#     puts "Creating a new animal"
#   end
  
#   def set_name(new_name) 
#     @name = new_name 
#   end
  
#   def get_name 
#     @name
#   end 
  
#   def name 
#     @name
#   end 
  
#   def name=(new_name)
#     if new_name.is_a?(Numeric)
#       puts "Name cannot be a number"
#     else 
#       @name = new_name 
#     end 
#   end 
# end 

# Creating an new instance of the class
# cat = Animal.new 
#Setting the name of the newly created instance
# cat.set_name("pere")
# puts cat.get_name
# puts cat.name 

# cat.name = "Sophie"
# puts cat.name

#Creating getters and setters using another helper_method

# class Dog 
  # attr_reader :name, :height, :weight 
  # attr_writer :name, :height, :weight
  #Use above two, or simply use 
  # attr_accessor :name, :height, :weight 
  
#   def bark 
#     return "Generic Bark"
#   end 
# end 

# jack = Dog.new 

# puts jack.name = "Jack"
# puts jack.height = "6 feet"
# puts jack.weight = '500kg'

#For implementing inheritance

# class GermanShephard < Dog 
#   def bark 
#     return "Loud Bark"
#   end
# end 

# Create a new instance of the GermanShephard class 
# max = GermanShephard.new 
# max.name = "Max"

# For formatted printing 
# printf "%s goes %s \n",max.name,max.bark()
  
  
# MODULES 
#They implement functionality to a class.They cannot be instantiated that is cannot be turned into objects 
#TO CREATE A MODULE
# module Human
  #GETTERS AND SETTERS
  # attr_accessor :name, :height, :weight
  #self IS SAME AS this in JAVASCRIPT 
#   def run 
#     puts self.name + " runs "
#   end 
# end 


#CREATING ANOTHER MODULE 
# module Smart
#   def act_smart
#     return "E = mc"
#   end
# end 

# IF WE REQUIRE THE MODULES WE CAN IMPORT THEM USING REQUIRE 

# require_relative "human" 
# require_relative "smart"

# module Animal 
#   def make_sound
#     puts "grrr"
#   end
# end 

# class Dog 
#   include Animal 
# end 

# rover = Dog.new 
# rover.make_sound 

# class Scientist
#   include human 
#   prepend Smart 
#   def act_smart
#     return "E = mc^2"
# end 
# end 

# sam = Scientist.new 
# puts sam.name =  "Albert"
# sam.run() 
# puts sam.name + "says" + sam.act_smart()
    
#POLYMORPHISM
# class Bird 
#   def tweet(bird_type)
#     bird_type.tweet
#   end
# end 

# class Cardinal < Bird 
#   def tweet 
#     puts "Tweet tweet"
#   end 
# end 

# class Parrot < Bird 
#   def tweet 
#     puts "Squak"
#   end 
# end 

# generic_bird = Bird.new 
# generic_bird.tweet(Cardinal.new)
# generic_bird.tweet(Parrot.new)


#SYMBOLS -- Strings used for conserving memory and to speedup the comparison process 

# array_1 = [1,2,3,4,5]

# array_1.unshift(3)
# array_1.shift()

# array_1.push(4,4,3)
# array_1.pop()

# puts array_1.size().to_s
# puts array_1.include?(100).to_s

# puts array_1.count(100).to_s
# puts array_1.empty?.to_s

# #Convert our array into the Strings
# puts array_1.join(", ")

# p array_1

# #To print the entire array using loop
# array_1.each do |i|
#   puts i
# end 

#hashes -- collection of key value pairs

# number_hash = {"PI" => 3.14, "Golden" => 1.618 }

# puts number_hash["PI"]

# superheroes = Hash["Clark Kent", "Superman", "Bruce Wayne", "Batman"]

# puts superheroes["Clark Kent"]

# superheroes.delete('Clark Kent')


# class Menu
#   include Enumerable 
#   def each 
#     yield "pizza"
#     yield "spaghetti"
#     yield "water"
#   end
# end 

# menu_options = Menu.new 

# menu_options.each do |item|
#   puts "Would you like to have : #{item}"
# end 

# p menu_options.find{|item| item = "pizza"}
# p menu_options.select{|item| item.size <= 5}
# p menu_options.reject{|item| item.size <= 5 }
# p menu_options.first
# p menu_options.take(2)

# p menu_options.drop(2)
# p menu_options.min
# p menu_options.max
# p menu_options.sort
# menu_options.reverse_each{ |item| puts item}

#WORKING WITH FILES 

# file = File.new("mox.out","w")

# file.puts "William Shakespeare"
# file.puts "Agatha Christie"
# files.puts "Barbara Cartland"

#TO CLOSE THE FILE
# file.close
#FOR READING THE FILE
# puts File.read("mox.out")

#TO OPEN THE FILE IN APPEND module
# file = File.new("mox.out", "a")
# file.puts "Prateek Madaan"
# file.close 
# puts File.read("mox.out")









